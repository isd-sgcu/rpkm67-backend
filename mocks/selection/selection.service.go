// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/selection/selection.service.go

// Package mock_selection is a generated GoMock package.
package mock_selection

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/backend/selection/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CountByBaanId mocks base method.
func (m *MockService) CountByBaanId(arg0 context.Context, arg1 *v1.CountByBaanIdSelectionRequest) (*v1.CountByBaanIdSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByBaanId", arg0, arg1)
	ret0, _ := ret[0].(*v1.CountByBaanIdSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByBaanId indicates an expected call of CountByBaanId.
func (mr *MockServiceMockRecorder) CountByBaanId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByBaanId", reflect.TypeOf((*MockService)(nil).CountByBaanId), arg0, arg1)
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *v1.CreateSelectionRequest) (*v1.CreateSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockService) Delete(arg0 context.Context, arg1 *v1.DeleteSelectionRequest) (*v1.DeleteSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), arg0, arg1)
}

// FindByGroupId mocks base method.
func (m *MockService) FindByGroupId(arg0 context.Context, arg1 *v1.FindByGroupIdSelectionRequest) (*v1.FindByGroupIdSelectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroupId", arg0, arg1)
	ret0, _ := ret[0].(*v1.FindByGroupIdSelectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupId indicates an expected call of FindByGroupId.
func (mr *MockServiceMockRecorder) FindByGroupId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupId", reflect.TypeOf((*MockService)(nil).FindByGroupId), arg0, arg1)
}

// mustEmbedUnimplementedSelectionServiceServer mocks base method.
func (m *MockService) mustEmbedUnimplementedSelectionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSelectionServiceServer")
}

// mustEmbedUnimplementedSelectionServiceServer indicates an expected call of mustEmbedUnimplementedSelectionServiceServer.
func (mr *MockServiceMockRecorder) mustEmbedUnimplementedSelectionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSelectionServiceServer", reflect.TypeOf((*MockService)(nil).mustEmbedUnimplementedSelectionServiceServer))
}
