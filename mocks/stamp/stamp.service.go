// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/stamp/stamp.service.go

// Package mock_stamp is a generated GoMock package.
package mock_stamp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/backend/stamp/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindByUserId mocks base method.
func (m *MockService) FindByUserId(arg0 context.Context, arg1 *v1.FindByUserIdStampRequest) (*v1.FindByUserIdStampResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0, arg1)
	ret0, _ := ret[0].(*v1.FindByUserIdStampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockServiceMockRecorder) FindByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockService)(nil).FindByUserId), arg0, arg1)
}

// StampByUserId mocks base method.
func (m *MockService) StampByUserId(arg0 context.Context, arg1 *v1.StampByUserIdRequest) (*v1.StampByUserIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StampByUserId", arg0, arg1)
	ret0, _ := ret[0].(*v1.StampByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StampByUserId indicates an expected call of StampByUserId.
func (mr *MockServiceMockRecorder) StampByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StampByUserId", reflect.TypeOf((*MockService)(nil).StampByUserId), arg0, arg1)
}

// mustEmbedUnimplementedStampServiceServer mocks base method.
func (m *MockService) mustEmbedUnimplementedStampServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStampServiceServer")
}

// mustEmbedUnimplementedStampServiceServer indicates an expected call of mustEmbedUnimplementedStampServiceServer.
func (mr *MockServiceMockRecorder) mustEmbedUnimplementedStampServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStampServiceServer", reflect.TypeOf((*MockService)(nil).mustEmbedUnimplementedStampServiceServer))
}
