// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/auth/auth/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetGoogleLoginUrl mocks base method.
func (m *MockService) GetGoogleLoginUrl(arg0 context.Context, arg1 *v1.GetGoogleLoginUrlRequest) (*v1.GetGoogleLoginUrlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleLoginUrl", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetGoogleLoginUrlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoogleLoginUrl indicates an expected call of GetGoogleLoginUrl.
func (mr *MockServiceMockRecorder) GetGoogleLoginUrl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleLoginUrl", reflect.TypeOf((*MockService)(nil).GetGoogleLoginUrl), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockService) RefreshToken(arg0 context.Context, arg1 *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*v1.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockServiceMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockService)(nil).RefreshToken), arg0, arg1)
}

// Validate mocks base method.
func (m *MockService) Validate(arg0 context.Context, arg1 *v1.ValidateRequest) (*v1.ValidateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(*v1.ValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockServiceMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockService)(nil).Validate), arg0, arg1)
}

// VerifyGoogleLogin mocks base method.
func (m *MockService) VerifyGoogleLogin(arg0 context.Context, arg1 *v1.VerifyGoogleLoginRequest) (*v1.VerifyGoogleLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyGoogleLogin", arg0, arg1)
	ret0, _ := ret[0].(*v1.VerifyGoogleLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyGoogleLogin indicates an expected call of VerifyGoogleLogin.
func (mr *MockServiceMockRecorder) VerifyGoogleLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyGoogleLogin", reflect.TypeOf((*MockService)(nil).VerifyGoogleLogin), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockService) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockServiceMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockService)(nil).mustEmbedUnimplementedAuthServiceServer))
}
