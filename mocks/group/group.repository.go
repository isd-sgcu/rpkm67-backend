// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/group/group.repository.go

// Package mock_group is a generated GoMock package.
package mock_group

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/isd-sgcu/rpkm67-model/model"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTX mocks base method.
func (m *MockRepository) CreateTX(tx *gorm.DB, group *model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTX", tx, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTX indicates an expected call of CreateTX.
func (mr *MockRepositoryMockRecorder) CreateTX(tx, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTX", reflect.TypeOf((*MockRepository)(nil).CreateTX), tx, group)
}

// DeleteGroupTX mocks base method.
func (m *MockRepository) DeleteGroupTX(tx *gorm.DB, groupId *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroupTX", tx, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroupTX indicates an expected call of DeleteGroupTX.
func (mr *MockRepositoryMockRecorder) DeleteGroupTX(tx, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupTX", reflect.TypeOf((*MockRepository)(nil).DeleteGroupTX), tx, groupId)
}

// FindByToken mocks base method.
func (m *MockRepository) FindByToken(token string, group *model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", token, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRepositoryMockRecorder) FindByToken(token, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRepository)(nil).FindByToken), token, group)
}

// FindOne mocks base method.
func (m *MockRepository) FindOne(id string, group *model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", id, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRepositoryMockRecorder) FindOne(id, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRepository)(nil).FindOne), id, group)
}

// UpdateConfirm mocks base method.
func (m *MockRepository) UpdateConfirm(id string, group *model.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfirm", id, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfirm indicates an expected call of UpdateConfirm.
func (mr *MockRepositoryMockRecorder) UpdateConfirm(id, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfirm", reflect.TypeOf((*MockRepository)(nil).UpdateConfirm), id, group)
}

// WithTransaction mocks base method.
func (m *MockRepository) WithTransaction(txFunc func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", txFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockRepositoryMockRecorder) WithTransaction(txFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockRepository)(nil).WithTransaction), txFunc)
}
